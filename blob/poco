#!/bin/bash -e
#GitHub: https://github.com/edges5352
#Website: https://powerlean.top
#Owner: Powerlean (2020)
######################################
export version=39
export found="bash"
export vibrate="echo -en \007"
export stop="sleep 0.1"

#特殊字符#
export yellow="\033[33m"
export red="\033[31m"
export green="\033[32m"
export done="\033[0m"
export footer="echo ────────────────────────────────────────────"

WHICH() {
for PROGRAM in "$found"; do
 RET=1
 IFS_SAVE="$IFS"
 IFS=:
 case $PROGRAM in
  */*)
   if [ -f "$PROGRAM" ] && [ -x "$PROGRAM" ]; then
    echo "$PROGRAM"
    RET=0
   fi
   ;;
  *)
   for ELEMENT in $PATH; do
    if [ -z "$ELEMENT" ]; then
     ELEMENT=.
    fi
    if [ -f "$ELEMENT/$PROGRAM" ] && [ -x "$ELEMENT/$PROGRAM" ]; then
     echo "$ELEMENT/$PROGRAM"
     RET=0
     [[ "$ALLMATCHES" -eq 1 ]] || break
    fi
   done
   ;;
 esac
 IFS="$IFS_SAVE"
 if [ "$RET" -ne 0 ]; then
  ALLRET=1
 fi
done
}

VIBRATE_DONE() {
loop=1
while [ $loop -lt 4 ]; do
    $vibrate
    $stop
    loop=$(($loop+1))
done
}

VIBRATE_ERROR() {
loop=1
while [ $loop -lt 3 ]; do
    $vibrate
    $stop
    loop=$(($loop+1))
done
}

DEPENDS_INSTALL() {
 eval "$(curl -s ${site}${tree}${1}.tree)" #生成输出变量
for i in $depends
do
   if [ ! -f $bin/$i ]; then #递归检查依赖
     poco install $i -s
   fi
done     
}

DEPENDS() {
${check_depends} #提示语
progress
error=`curl -s ${site_404}`
depends_url=`curl -s ${site}${tree}${1}.tree`
if [[ "$error" == "$depends_url" ]]; then
  ${depends_error}
  VIBRATE_ERROR
  exit 2
fi
eval "$(curl -s ${site}${tree}${1}.tree)" #生成输出变量
for i in $depends
do
   if [ ! -f $bin/$i ]; then #递归检查依赖
     echo -e "${depends_loaded}${yellow}${i}${done}" #提示语
     poco install $i -s
   fi
done
     ${depends_done} #提示语
     ${vibrate} #震动一次
}

DEPENDS_SILENT() {
 error=`curl -s ${site_404}`
 depends_url=`curl -s ${site}${tree}${1}.tree`
 if [[ "$error" == "$depends_url" ]]; then
   VIBRATE_ERROR
   exit 2
 fi
 eval "$(curl -s ${site}${tree}${1}.tree)" #生成输出变量
for i in $depends
do
   if [ ! -f $bin/$i ]; then #递归检查依赖
     poco install $i -s
   fi
done     
}

#目标地址#
export config_file="$PREFIX/etc/poco.conf"
export list_url=`sed '/^listURL=/!d;s/.*=//' $config_file`
export site=`sed '/^URL=/!d;s/.*=//' $config_file`
export site_404=`sed '/^page404=/!d;s/.*=//' $config_file`
export bin=`WHICH | sed 's/bash//g'`
export blob=`sed '/^blob=/!d;s/.*=//' $config_file`
export tree=`sed '/^tree=/!d;s/.*=//' $config_file`
export setup="mv ${2} ${bin}"
export output="/dev/null"

#毫无作用的乐色#
function progress {
  point="echo -n ."
  sec="0.2"
  loop=1
while [ $loop -lt 3 ]; do
    sleep $sec
    $point
    loop=$(($loop+1))
done
sleep $sec
echo "."
}

#字符变量#
#中文
export bad_suffix_cn="echo -e ${red}无效操作：未定义的后缀或输入了多个文件名${done}"
export error_remove_cn="echo -e ${red}无效操作 ${choice}${done}"
export remove_cn="确定要移除此文件吗？"
export void_cn="echo -e ${red}无效操作 ${1}${done}"
export search_cn="echo -n -e  正在向${yellow}${site}${blob}${2}${done}核对报头"
export void_found_cn="echo -e ${red} 此文件不存在或暂不提供下载，抱歉...${done}"
export try_download_cn="echo -n 核对完成，尝试获取文件主体"
export file_fail_cn="echo -e ${red}获取失败:文件${yellow}${2}${done}不存在或因目标停止传输${done}"
export firewall_fail_cn="echo -e ${red}获取失败:请检索网络或防火墙设置${done}"
export done_download_cn="echo -e 文件${yellow}${2}${done}获取完成"
export unknow_cn="echo -e 出现不明原因错误，若您觉得这个问题不该出现，请将其反馈至${yellow}https://powerlean.top/issues${done}"
export hook_cn="echo -n 正在释放资源"
export done_setup_cn="echo -e ${yellow}${2}${done}设定完成"
export error_found_cn="echo -e ${red}无法移除${2}：文件或目录不存在${done}"
export install_info_cn="从目标地址获取指定文件"
export remove_info_cn="删除指定的可执行文件"
export help_info_cn="查询有效参数"
export intro_info_cn="POWER COLLECTOR是Powerlean资源存储分发库附带的下载安装文件管理程序"
export not_input_cn="echo -e ${red}请指定一个目标文件${done}"
export come_cn="来自"
export size_cn="总计大小"
export install_cn="确定要获取此文件吗?"
export error_get_cn="echo -e ${red}无效操作 ${choice}${done}"
export unit_cn="字符"
export list_info_cn="列出所有可供下载的文件"
export request_cn="正在从远端拉取请求"
export force_update_cn="echo -e ${red}正在进行必要的强制更新,请勿终止程序${done}"
export check_version_cn="echo -n 正在校对版本信息"
export check_file_cn="echo -n 正在校验程序完整性"
export re_install_cn="echo -e ${red}您的程序好像并不完整或被尝试修改过，正在拉取线上文件进行修复${done}"
export suffix_cn="后缀"
export y_info_cn="跳过确认环节"
export s_info_cn="静默模式"
export size_info_cn="总计下载"
export abort_cn="echo -e 终止"
export res_cn="echo -e 搜索结果："
export update_note_cn="echo -e \033[41;37m 更新日志 \033[0m"
export search_info_cn="联网查找软件描述"
export check_depends_cn="echo -n 正在校验树状依赖"
export depends_loaded_cn="自动选定软件包"
export depends_done_cn="echo 所有依赖均已加入哈希表"
export site_warn_cn="echo ${red}请谨慎不明身份的网站${done}"
export depends_error_cn="echo -e ${red}该软件的依赖项无法被满足${done}"

#English
export install="Are you sure that you want to download this file?"
export come="From"
export void="echo -e ${red}Invalid operation ${1}${done}"
export search="echo -n -e  Checking headers from ${yellow}${site}${blob}${2}${done}"
export void_found="echo -e ${red} No such file or cannot be collecting,sorry...${done}"
export try_download="echo -n Check done,start collecting"
export file_fail="echo -e ${red}Something error:file${yellow}${2}${done} is not exist or progress interruption${done}"
export firewall_fail="echo -e ${red}Something error:please check your network and firewall settings${done}"
export done_download="echo -e File ${yellow}${2}${done} is downloaded"
export unknow="echo -e Something wrong,if you think it is a problem,please send feedback to ${yellow}https://powerlean.top/issues${done}"
export hook="echo -ne Setting up ${yellow}${2}${done}"
export done_setup="echo -e ${yellow}${2}${done} is already set done"
export remove="Are you sure that you want to remove this file?"
export error_remove="echo -e ${red}Invalid operation ${choice}${done}"
export error_found="echo -e ${red}cannot remove $2: No such file or directory${done}"
export install_info="Get a specified file"
export remove_info="Delete a specified file"
export help_info="Get help with poco"
export intro_info="POWER COLLECTOR is a installation management script cluded with Powerlean Online Repository"
export not_input="echo -e ${red}Please specify a file name${done}"
export size="Total Size"
export error_get="echo -e ${red}Invalid operation ${choice}${done}"
export unit=" chars"
export list_info="List all files which can be download"
export request="To remote:Pulling request"
export force_update="echo -e ${red}You are below the latest version,force update will start at moment${done}"
export bad_suffix="echo -e ${red}Invalid operation，do not enter multiple file names${done}"
export check_version="echo -n Checking version information"
export check_file="echo -n Checking program integrity"
export re_install="echo -e ${red}Your program is incomplete,being repaired${done}"
export suffix="suffix"
export y_info="Skip confirmation"
export s_info="Silent mode"
export size_info="Total downloaded "
export abort="echo -e Abort"
export res="echo -e Search results:"
export update_note="echo -e \033[41;37m  Release Note \033[0m"
export search_info="To find the software description"
export check_depends="echo -n Building dependency tree"
export depends_loaded="Auto-selected package "
export depends_done="echo Dependency were built done"
export site_warn="echo ${red}Unofficial websites can be dangerous${done}"
export depends_error="echo -e ${red}The software's dependencies cannot be met${done}"

#语言设定
#LANG="zh_CN.UTF-8" #取消该注释将程序设定为中文(在句尾另添一个"#")
if [[ "$LANG" == zh_*.UTF-8 ]]; then
  export bad_suffix=$bad_suffix_cn
  export list_info=$list_info_cn
  export unit=$unit_cn
  export size=$size_cn
  export install=$install_cn
  export come=$come_cn
  export intro_info=$intro_info_cn
  export error_found=$error_found_cn
  export void=$void_cn
  export search=$search_cn
  export void_found=$void_found_cn
  export try_download=$try_download_cn
  export file_fail=$file_fail_cn
  export firewall_fail=$firewall_fail_cn
  export done_download=$done_download_cn
  export unknow=$unknow_cn
  export hook=$hook_cn
  export done_setup=$done_setup_cn
  export remove=$remove_cn
  export error_remove=$error_remove_cn
  export install_info=$install_info_cn
  export remove_info=$remove_info_cn
  export help_info=$help_info_cn
  export not_input=$not_input_cn
  export error_get=$error_get_cn
  export request=$request_cn
  export force_update=$force_update_cn
  export check_version=$check_version_cn
  export check_file=$check_file_cn
  export re_install=$re_install_cn
  export suffix=$suffix_cn
  export y_info=$y_info_cn
  export s_info=$s_info_cn
  export size_info=$size_info_cn
  export abort=$abort_cn
  export res=$res_cn
  export update_note=$update_note_cn
  export search_info=$search_info_cn
  export check_depends=$check_depends_cn
  export depends_loaded=$depends_loaded_cn
  export depends_done=$depends_done_cn
  export site_warn=$site_warn_cn
  export depends_error=$depends_error_cn
fi


#主体(一扇区)
if [ "$1" == "install" -o "$1" == "i" ]; then #因玄学问题取消一元运算符
  if [ "$3" == "-s" ]; then #静默模式
    try=$(curl -I -m 10 -o /dev/null -s -w %{http_code} ${site}${blob}${2})
    if [ "$try" -ne "200" ]; then
      VIBRATE_ERROR
      exit 2
    else
      curl -#OL ${site}$blob/$2
      ${setup}
      chmod +x $bin/$2
       DEPENDS_SILENT ${2}
      VIBRATE_DONE
      exit 0
    fi
  fi
  if [ not"$2" == "not" ]; then
    ${not_input}
    VIBRATE_ERROR
    exit 2
  fi
  ${check_version}
  progress
   curl -s ${site}$blob/poco.update | bash
   ${vibrate}
   
   CHECK_FILE() {
   ${check_file}
   progress
   origin=$(curl -s ${site}$blob/poco)
   local=$(cat $bin/poco)
   if [[ "${#origin}" -ne "${#local}" ]]; then
     ${re_install}
     VIBRATE_ERROR
     export mode="update"
     curl -s ${site}$blob/poco.setup | bash
   fi
   ${vibrate}
   }
   
   #若版本更新被触发，则跳过文件校验
 check_status="CHECK_FILE"
 if [ "$status" == "complete" ]; then
  unset check_status
 fi
  
   #文件校验环节
  ${check_status}
  ${search}
  progress
  not_found=`curl -s ${site_404}`
  try=$(curl -I -m 10 -o /dev/null -s -w %{http_code} ${site}${blob}${2})
  if [ "$try" -ne "200" ]; then
    ${void_found}
    VIBRATE_ERROR
    exit 2
  else
    ${vibrate}
    ${try_download}
    progress
    if [ "$3" == "-y" -o "$3" == "-Y" ]; then #跳过确认环节
       curl -#OL ${site}/$blob/$2
       ${vibrate}
    elif [ not"$3" == "not" ]; then
    INTRO=$(curl -s ${site}/${blob}/poco.list | sed '/^'"$2"' *-/!d;s/.*- //')
     DATE=$(date)
     ${footer}
     echo -e "${2}  ${DATE}" #${size}:${#try}${unit}
     echo " ${INTRO}"
     echo ""
     echo -e "${come}:${yellow}${site}${blob}${2}${done}"
     ${footer}
     ${vibrate}
     read -p "$install [Y/n]: " choice
        if [ "$choice" == "y" -o "$choice" == "Y" ]; then
          curl -#OL ${site}$blob/$2
        elif [ "$choice" == "n" -o "$choice" == "N" ]; then
          ${abort}
          VIBRATE_DONE
          exit 0
        else
          ${error_get}
          VIBRATE_ERROR
          exit 1
        fi
    else
      ${bad_suffix}
      VIBRATE_ERROR
      exit 2
    fi
    case $? in
      "8")
        ${file_fail}
        exit 2
    ;;
      "4")
        ${firewall_fail}
        exit 3
    ;;
      "0")
        ${done_download}
    ;;
        *)
        ${unknow}
        exit 1
    esac
  download_size=`ls -sh ${2} | sed "s/ ${2}//g"` #统计文件大小
  echo -e "${size_info}${yellow}$download_size${done}"
  ${vibrate}
  ${hook}
  progress
  ${setup}
  chmod +x $bin/$2
   DEPENDS ${2}
  ${done_setup}
  VIBRATE_DONE
fi 

#主体(二扇区)
elif [ "$1" == "remove" -o "$1" == "r" ]; then
  if [ not"$2" == "not" ]; then
    ${not_input}
    VIBRATE_ERROR
    exit 2
  fi
  if [ -f $bin/$2 ]; then
    read -p "$remove [Y/n]: " choice
    if [ "$choice" == "y" -o "$choice" == "Y" ]; then
      rm -rf $bin/$2 #因为不明文件属性，故强制递归
      VIBRATE_DONE
    elif [ "$choice" == "n" -o "$choice" == "N" ]; then
      VIBRATE_DONE
      exit 0
    else
      ${error_remove}
      VIBRATE_ERROR
      exit 1
    fi
  else
    ${error_found}
    VIBRATE_ERROR
  fi

#主体(三扇区)
elif [ "$1" == "list" -o "$1" == "l" ]; then
  echo -n "${request}"
  progress
  curl -s ${list_url}
  VIBRATE_DONE

#主体(四扇区)
elif [ "$1" == "help" -o "$1" == "h" -o "$1" == "-h" ]; then
  echo "poco       version:${version}"
  echo ""
  echo "${intro_info}"
  echo ""
  echo -e "${green}i${done}nstall       ${install_info}"
  echo -e "${green}r${done}emove        ${remove_info}"
  echo -e "${green}h${done}elp          ${help_info}"
  echo -e "${green}l${done}ist          ${list_info}"
  echo -e "${green}s${done}earch        ${search_info}"
  echo ""
  echo "${suffix}"
  echo -e "-y            ${y_info}"
  echo -e "-s            ${s_info}"

#主体(五扇区)
elif [ "$1" == "search" -o "$1" == "s" ]; then
  if [ not"$2" == "not" ]; then
    ${not_input}
    VIBRATE_ERROR
    exit 2
  fi
  looking="${@##s*}"
  ifs=1
  for i in $looking
  do
  try=$(curl -I -m 10 -o /dev/null -s -w %{http_code} ${site}${blob}${i})
  ${vibrate}
  if [ "$try" == "200" ]; then
     INTRO=$(curl -s ${site}/${blob}/poco.list | sed '/^'"$i"' *-/!d;s/.*- //')
     echo -n "$ifs."
     ${res}
     echo -e "${yellow}${i}${done}   $INTRO"
     ifs=$(($ifs+1))
  fi
  done
  VIBRATE_DONE

#主体(六扇区)
else
  ${void}
  poco help
  VIBRATE_ERROR
fi
